<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
{
  player_wins = 0;
  computer_wins = 0;
  mcts_type = MctsType(
    tictactoe_generate_state,
    tictactoe_generate_moves,
    tictactoe_apply_move,
    tictactoe_final_playout,
    tictactoe_serialize,
    tictactoe_deserialize,
    undefined
  );
  ellipsis_animate = 0;
  ellipsis_animate_speed = 3/room_speed;
  event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allocate time for the AI if it's the computer's turn
{
  if (state[9] != player_symbol &amp;&amp; is_undefined(game_outcome) &amp;&amp; !global.animating) {
    var time_slice = min((1000/room_speed)/2, global.mcts_time);
    if (is_undefined(mcts_tree)) {
      mcts_tree = MctsTree(mcts_type, state,
        tictactoe_select,
        tictactoe_expand,
        tictactoe_playout,
        tictactoe_tentative_playout,
        tictactoe_reweight,
        tictactoe_interpret_playout
      );
    }
    mcts_tree_evaluate(mcts_tree, time_slice, time_slice);
    mcts_time_elapsed += time_slice;
    ellipsis_animate += ellipsis_animate_speed;
    if (ellipsis_animate &gt;= 4) {
      ellipsis_animate -= 4;
    }
    if (mcts_time_elapsed &gt; global.mcts_time) {
      var best_move = mcts_tree_get_best_move(mcts_tree);
      tictactoe_apply_move(state, best_move);
      if (player_symbol == 1) {
        symbol_instances[best_move] = instance_create(480+160*(best_move mod 3), 200+160*(best_move div 3), obj_x);
      }
      else {
        symbol_instances[best_move] = instance_create(480+160*(best_move mod 3), 200+160*(best_move div 3), obj_o);
      }
      mcts_time_elapsed = 0;
      mcts_tree = undefined;
      ellipsis_animate = 0;
      event_user(1);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play a sound and animate symbols if the game is done
{
  if (!(game_done || is_undefined(game_outcome) || global.animating)) {
    // Play the right sound and increment score
    if (game_outcome == 0) {
      audio_play_sound(snd_draw, 1, false);
    }
    else if (game_outcome == player_symbol) {
      audio_play_sound(snd_win, 1, false);
      player_wins++;
    }
    else {
      audio_play_sound(snd_lose, 1, false);
      computer_wins++;
    }
    // Animate symbols if someone won
    if (game_outcome != 0) {
      var animates;
      // Rows
      if (state[@ 0] == state[@ 1] &amp;&amp; state[@ 0] == state[@ 2] &amp;&amp; state[@ 0] != 0) {
        animates[0] = 0; animates[1] = 1; animates[2] = 2;
      }
      if (state[@ 3] == state[@ 4] &amp;&amp; state[@ 3] == state[@ 5] &amp;&amp; state[@ 3] != 0) {
        animates[0] = 3; animates[1] = 4; animates[2] = 5;
      }
      if (state[@ 6] == state[@ 7] &amp;&amp; state[@ 6] == state[@ 8] &amp;&amp; state[@ 6] != 0) {
        animates[0] = 6; animates[1] = 7; animates[2] = 8;
      }
      // Columns
      if (state[@ 0] == state[@ 3] &amp;&amp; state[@ 0] == state[@ 6] &amp;&amp; state[@ 0] != 0) {
        animates[0] = 0; animates[1] = 3; animates[2] = 6;
      }
      if (state[@ 1] == state[@ 4] &amp;&amp; state[@ 1] == state[@ 7] &amp;&amp; state[@ 1] != 0) {
        animates[0] = 1; animates[1] = 4; animates[2] = 7;
      }
      if (state[@ 2] == state[@ 5] &amp;&amp; state[@ 2] == state[@ 8] &amp;&amp; state[@ 2] != 0) {
        animates[0] = 2; animates[1] = 5; animates[2] = 8;
      }
      // Diagonals
      if (state[@ 0] == state[@ 4] &amp;&amp; state[@ 0] == state[@ 8] &amp;&amp; state[@ 0] != 0) {
        animates[0] = 0; animates[1] = 4; animates[2] = 8;
      }
      if (state[@ 2] == state[@ 4] &amp;&amp; state[@ 2] == state[@ 6] &amp;&amp; state[@ 2] != 0) {
        animates[0] = 2; animates[1] = 4; animates[2] = 6;
      }
      // Animate them
      for (var i = 0; i &lt; 3; i++) {
        with (symbol_instances[animates[i]]) event_user(1);
      }
    }
    // Mark game as done
    game_done = true;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Accept plays from the player
{
  if (state[9] == player_symbol &amp;&amp; is_undefined(game_outcome) &amp;&amp; !global.animating) {
    var cellx = (mouse_x-400) div 160,
        celly = (mouse_y-120) div 160;
    if (cellx &gt;= 0 &amp;&amp; cellx &lt;= 2 &amp;&amp; celly &gt;= 0 &amp;&amp; celly &lt;= 2) {
      var move = celly*3+cellx;
      if (tictactoe_apply_move(state, move)) {
        if (player_symbol == 1) {
          symbol_instances[move] = instance_create(480+160*cellx, 200+160*celly, obj_o);
        }
        else {
          symbol_instances[move] = instance_create(480+160*cellx, 200+160*celly, obj_x);
        }
        event_user(1);
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Let the player restart the game if it's done by clicking the board
{
  if (game_done) {
    if (mouse_x &gt;= 400 &amp;&amp; mouse_x &lt;= 400+160*3 &amp;&amp; mouse_y &gt;= 120 &amp;&amp; mouse_y &lt;= 120+160*3) {
      event_user(0);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check wins
{
  game_outcome = tictactoe_final_playout(state);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate new game
{
  // Remove old visuals
  with (pobj_board_symbol) instance_destroy();
  // Start new board
  player_symbol = choose(-1, 1);
  state = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, choose(-1, 1));
  symbol_instances = Array(noone, noone, noone, noone, noone, noone, noone, noone, noone);
  game_outcome = undefined;
  game_done = false;
  mcts_tree = undefined;
  mcts_time_elapsed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw text
{
  // Setup
  draw_set_halign(fa_center);
  draw_set_font(fnt_text);
  draw_set_colour($c7c7c7);
  
  // Player
  draw_text(192, 192, "Player");
  draw_text(192, 192+64, string(player_wins));
  if (player_symbol == 1) {
    draw_sprite(spr_o, 0, 192, 192+64+160);
  }
  else {
    draw_sprite(spr_x, 0, 192, 192+64+160);
  }
  if (!global.animating) {
    if (is_undefined(game_outcome)) {
      if (player_symbol == state[9]) {
        draw_text(192, 192+64+160+100, "Your move");
      }
    }
    else {
      if (game_outcome == 0) {
        draw_text(192, 192+64+160+100, "DRAW");
      }
      else if (game_outcome == player_symbol) {
        draw_text(192, 192+64+160+100, "WINNER");
      }
      else {
        draw_text(192, 192+64+160+100, "LOSER");
      }
    }
  }
  // Computer
  draw_text(room_width-192, 192, "Computer");
  draw_text(room_width-192, 192+64, string(computer_wins));
  if (player_symbol == 1) {
    draw_sprite(spr_x, 0, room_width-192, 192+64+160);
  }
  else {
    draw_sprite(spr_o, 0, room_width-192, 192+64+160);
  }
  if (!global.animating) {
    if (is_undefined(game_outcome)) {
      if (player_symbol != state[9]) {
        draw_text(room_width-192, 192+64+160+100, "Thinking" + string_repeat(".", round(ellipsis_animate)));
      }
    }
    else {
      if (game_outcome == 0) {
        draw_text(room_width-192, 192+64+160+100, "DRAW");
      }
      else if (game_outcome != player_symbol) {
        draw_text(room_width-192, 192+64+160+100, "WINNER");
      }
      else {
        draw_text(room_width-192, 192+64+160+100, "LOSER");
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
